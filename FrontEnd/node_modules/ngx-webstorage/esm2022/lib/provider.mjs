import { APP_INITIALIZER, inject, InjectionToken, makeEnvironmentProviders } from '@angular/core';
import { StrategyIndex } from '../public_api';
import { InMemoryStorageStrategyProvider, LocalStorageStrategyProvider, SessionStorageStrategyProvider } from './strategies';
import { LocalStorageProvider, SessionStorageProvider } from './core/nativeStorage';
import { LocalStorageServiceProvider } from './services/localStorage';
import { SessionStorageServiceProvider } from './services/sessionStorage';
import { DefaultIsCaseSensitive, DefaultPrefix, DefaultSeparator } from './constants/config';
import { StorageKeyManager } from './helpers/storageKeyManager';
export const LIB_CONFIG = new InjectionToken('ngx_webstorage_config');
export var InternalNgxWebstorageFeatureKind;
(function (InternalNgxWebstorageFeatureKind) {
    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind["Config"] = 1] = "Config";
    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind["LocalStorage"] = 2] = "LocalStorage";
    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind["SessionStorage"] = 3] = "SessionStorage";
})(InternalNgxWebstorageFeatureKind || (InternalNgxWebstorageFeatureKind = {}));
function appInit() {
    const config = inject(LIB_CONFIG);
    const index = inject(StrategyIndex);
    return () => {
        StorageKeyManager.consumeConfiguration(config);
        index.indexStrategies();
    };
}
/**
 * Provide ngx-webstorage basic features.
 *
 * - You can customise the configuration with the `withConfiguration` feature.
 * - You can enable the `LocalStorage` features with the `withLocalStorage` feature.
 * - You can enable the `SessionStorage` features with the `withSessionStorage` feature.
 *
 * @default config { prefix: 'ngx-webstorage', separator: '|', caseSensitive: false }
 */
export function provideNgxWebstorage(...features) {
    const { configProvider, featureProviders } = parseFeatures(features);
    return makeEnvironmentProviders([
        configProvider,
        InMemoryStorageStrategyProvider,
        { provide: APP_INITIALIZER, useFactory: appInit, multi: true },
        ...featureProviders,
    ]);
}
function parseFeatures(features) {
    let configProvider;
    const featureProviders = [];
    const parsedFeatures = new Set();
    for (const feature of features) {
        if (parsedFeatures.has(feature.kind))
            throw new Error(`Feature ${feature.kind} is already provided.`);
        if (feature.kind === InternalNgxWebstorageFeatureKind.Config) {
            configProvider = feature.providers[0];
        }
        else
            featureProviders.push(...feature.providers);
        parsedFeatures.add(feature.kind);
    }
    return {
        configProvider: configProvider ?? {
            provide: LIB_CONFIG,
            useValue: { prefix: DefaultPrefix, separator: DefaultSeparator, caseSensitive: DefaultIsCaseSensitive }
        },
        featureProviders
    };
}
export function makeNgxWebstorageFeature(kind, providers) {
    return { kind, providers };
}
export function withNgxWebstorageConfig(config) {
    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.Config, [{ provide: LIB_CONFIG, useValue: config }]);
}
/** Provides everything necessary to use the `LocalStorage` features. */
export function withLocalStorage() {
    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.LocalStorage, [
        LocalStorageProvider,
        LocalStorageServiceProvider,
        LocalStorageStrategyProvider,
    ]);
}
export function withSessionStorage() {
    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.SessionStorage, [
        SessionStorageProvider,
        SessionStorageServiceProvider,
        SessionStorageStrategyProvider,
    ]);
}
//# sourceMappingURL=data:application/json;base64,