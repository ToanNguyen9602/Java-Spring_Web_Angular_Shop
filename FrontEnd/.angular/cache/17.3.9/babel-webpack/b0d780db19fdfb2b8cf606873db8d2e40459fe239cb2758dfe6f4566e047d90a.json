{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class TokenService {\n  constructor() {\n    this.TOKEN_KEY = \"access_token\";\n    this.jwtHelperService = new JwtHelperService();\n  }\n  //getter\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  //setter\n  setToken(token) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n  removeToken() {\n    localStorage.removeItem(this.TOKEN_KEY);\n  }\n  getUserId() {\n    //lấy ra token\n    let userObject = this.jwtHelperService.decodeToken(this.getToken() ?? \"\");\n    //kiểm tra trong token có trường userId trong claims hay k\n    return \"userId\" in userObject ? parseInt(userObject[\"userId\"]) : 0;\n  }\n  isTokenExpired() {\n    if (this.getToken() == null) {\n      return false;\n    }\n    return this.jwtHelperService.isTokenExpired(this.getToken());\n  }\n  static #_ = this.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["JwtHelperService","TokenService","constructor","TOKEN_KEY","jwtHelperService","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getUserId","userObject","decodeToken","parseInt","isTokenExpired","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Admin\\Desktop\\ShopApp\\Java-Spring_Web_Angular_Shop\\FrontEnd\\src\\app\\service\\token.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TokenService {\r\n  private readonly TOKEN_KEY = \"access_token\";\r\n  private jwtHelperService = new JwtHelperService();\r\n  constructor() {}\r\n  //getter\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.TOKEN_KEY);\r\n  }\r\n  //setter\r\n  setToken(token: string): void {\r\n    localStorage.setItem(this.TOKEN_KEY, token);\r\n  }\r\n  removeToken(): void {\r\n    localStorage.removeItem(this.TOKEN_KEY);\r\n  }\r\n  getUserId(): number {\r\n    //lấy ra token\r\n    let userObject = this.jwtHelperService.decodeToken(this.getToken() ?? \"\");\r\n    //kiểm tra trong token có trường userId trong claims hay k\r\n    return \"userId\" in userObject ? parseInt(userObject[\"userId\"]) : 0;\r\n  }\r\n  isTokenExpired(): boolean {\r\n    if (this.getToken() == null) {\r\n      return false;\r\n    }\r\n    return this.jwtHelperService.isTokenExpired(this.getToken()!);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,oBAAoB;;AAKrD,OAAM,MAAOC,YAAY;EAGvBC,YAAA;IAFiB,KAAAC,SAAS,GAAG,cAAc;IACnC,KAAAC,gBAAgB,GAAG,IAAIJ,gBAAgB,EAAE;EAClC;EACf;EACAK,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,SAAS,CAAC;EAC7C;EACA;EACAK,QAAQA,CAACC,KAAa;IACpBH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACP,SAAS,EAAEM,KAAK,CAAC;EAC7C;EACAE,WAAWA,CAAA;IACTL,YAAY,CAACM,UAAU,CAAC,IAAI,CAACT,SAAS,CAAC;EACzC;EACAU,SAASA,CAAA;IACP;IACA,IAAIC,UAAU,GAAG,IAAI,CAACV,gBAAgB,CAACW,WAAW,CAAC,IAAI,CAACV,QAAQ,EAAE,IAAI,EAAE,CAAC;IACzE;IACA,OAAO,QAAQ,IAAIS,UAAU,GAAGE,QAAQ,CAACF,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;EACpE;EACAG,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACZ,QAAQ,EAAE,IAAI,IAAI,EAAE;MAC3B,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAACD,gBAAgB,CAACa,cAAc,CAAC,IAAI,CAACZ,QAAQ,EAAG,CAAC;EAC/D;EAAC,QAAAa,CAAA,G;qBA1BUjB,YAAY;EAAA;EAAA,QAAAkB,EAAA,G;WAAZlB,YAAY;IAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}