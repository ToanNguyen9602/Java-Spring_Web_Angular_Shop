{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nimport { environment } from \"src/app/environments/environment\";\nexport let OrderComponent = class OrderComponent {\n  constructor(cartService, productService, orderService, formBuilder, tokenService) {\n    this.cartService = cartService;\n    this.productService = productService;\n    this.orderService = orderService;\n    this.formBuilder = formBuilder;\n    this.tokenService = tokenService;\n    this.cartItems = [];\n    this.couponCode = \"\";\n    this.totalAmount = 0;\n    this.orderData = {\n      userId: 1,\n      // fullname: '',  Khởi tạo rỗng, sẽ được điền từ form\n      email: \"\",\n      phone_number: \"\",\n      address: \"\",\n      note: \"\",\n      total_money: 0,\n      payment_method: \"cod\",\n      shipping_method: \"express\",\n      coupon_code: \"\",\n      cart_items: [],\n      fullname: \"\"\n    };\n    this.orderForm = this.formBuilder.group({\n      fullname: [\"\", Validators.required],\n      email: [\"\", [Validators.email]],\n      phone_number: [\"\", [Validators.required, Validators.minLength(6)]],\n      address: [\"\", [Validators.required, Validators.minLength(5)]],\n      note: [\"\"],\n      shipping_method: [\"\"],\n      payment_method: [\"\"]\n    });\n  }\n  ngOnInit() {\n    debugger;\n    // Lấy danh sách sản phẩm từ giỏ hàng\n    const cart = this.cartService.getCart();\n    // Chuyển danh sách ID từ Map giỏ hàng\n    const productIds = Array.from(cart.keys());\n    debugger;\n    //get info detail product by list productIds\n    this.productService.getProductsByIds(productIds).subscribe({\n      next: products => {\n        debugger;\n        this.cartItems = productIds.map(productId => {\n          debugger;\n          const product = products.find(p => p.id === productId);\n          if (product) {\n            product.thumbnail = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\n          }\n          return {\n            product: product,\n            quantity: cart.get(productId)\n          };\n        });\n        console.log(\"done\");\n      },\n      complete: () => {\n        debugger;\n        this.calculateTotal();\n      },\n      error: error => {\n        debugger;\n        console.error(\"Error fetching detail: \", error);\n      }\n    });\n  }\n  placeOrder() {\n    debugger;\n    if (this.orderForm.valid) {\n      // this.orderData.fullname = this.orderForm.get('fullname')!.value;\n      // this.orderData.email = this.orderForm.get('email')!.value;\n      // this.orderData.phone_number = this.orderForm.get('phone_number')!.value;\n      // this.orderData.address = this.orderForm.get('address')!.value;\n      // this.orderData.note = this.orderForm.get('note')!.value;\n      // this.orderData.shipping_method = this.orderForm.get('shipping_method')!.value;\n      // this.orderData.payment_method = this.orderForm.get('payment_method')!.value;\n      this.orderData = {\n        ...this.orderData,\n        ...this.orderForm.value\n      };\n      this.orderData.cart_items = this.cartItems.map(cartItem => ({\n        product_id: cartItem.product.id,\n        quantity: cartItem.quantity\n      }));\n    }\n    this.orderService.placeOrder(this.orderData).subscribe({\n      next: response => {\n        debugger;\n        console.log(\"Đặt hàng thành công\");\n      },\n      complete: () => {\n        debugger;\n        this.calculateTotal();\n      },\n      error: error => {\n        debugger;\n        console.error(\"Lỗi khi đặt hàng: \", error);\n      }\n    });\n  }\n  calculateTotal() {\n    this.totalAmount = this.cartItems.reduce((total, item) => total + item.product.price * item.quantity, 0);\n  }\n  // Hàm xử lý việc áp dụng mã giảm giá\n  applyCoupon() {\n    // Viết mã xử lý áp dụng mã giảm giá ở đây\n    // Cập nhật giá trị totalAmount dựa trên mã giảm giá nếu áp dụng\n  }\n};\nOrderComponent = __decorate([Component({\n  selector: \"app-order\",\n  templateUrl: \"./order.component.html\",\n  styleUrls: [\"./order.component.scss\"]\n})], OrderComponent);","map":{"version":3,"names":["Component","Validators","environment","OrderComponent","constructor","cartService","productService","orderService","formBuilder","tokenService","cartItems","couponCode","totalAmount","orderData","userId","email","phone_number","address","note","total_money","payment_method","shipping_method","coupon_code","cart_items","fullname","orderForm","group","required","minLength","ngOnInit","cart","getCart","productIds","Array","from","keys","getProductsByIds","subscribe","next","products","map","productId","product","find","p","id","thumbnail","apiBaseUrl","quantity","get","console","log","complete","calculateTotal","error","placeOrder","valid","value","cartItem","product_id","response","reduce","total","item","price","applyCoupon","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Admin\\Desktop\\ShopApp\\Java-Spring_Web_Angular_Shop\\FrontEnd\\src\\app\\components\\order\\order.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { OrderDTO } from \"src/app/dtos/order/order.dto\";\r\nimport { environment } from \"src/app/environments/environment\";\r\nimport { Product } from \"src/app/models/product\";\r\nimport { CartService } from \"src/app/service/cart.service\";\r\nimport { OrderService } from \"src/app/service/order.service\";\r\nimport { ProductService } from \"src/app/service/product.service\";\r\n\r\n@Component({\r\n  selector: \"app-order\",\r\n  templateUrl: \"./order.component.html\",\r\n  styleUrls: [\"./order.component.scss\"],\r\n})\r\nexport class OrderComponent implements OnInit {\r\n  orderForm: FormGroup;\r\n  cartItems: { product: Product; quantity: number }[] = [];\r\n  couponCode: string = \"\";\r\n  totalAmount: number = 0;\r\n  orderData: OrderDTO = {\r\n    userId: 1,\r\n    // fullname: '',  Khởi tạo rỗng, sẽ được điền từ form\r\n    email: \"\",\r\n    phone_number: \"\",\r\n    address: \"\",\r\n    note: \"\",\r\n    total_money: 0,\r\n    payment_method: \"cod\",\r\n    shipping_method: \"express\",\r\n    coupon_code: \"\",\r\n    cart_items: [],\r\n    fullname: \"\",\r\n  };\r\n  constructor(\r\n    private cartService: CartService,\r\n    private productService: ProductService,\r\n    private orderService: OrderService,\r\n    private formBuilder: FormBuilder,\r\n    private tokenService\r\n  ) {\r\n    this.orderForm = this.formBuilder.group({\r\n      fullname: [\"\", Validators.required],\r\n      email: [\"\", [Validators.email]],\r\n      phone_number: [\"\", [Validators.required, Validators.minLength(6)]],\r\n      address: [\"\", [Validators.required, Validators.minLength(5)]],\r\n      note: [\"\"],\r\n      shipping_method: [\"\"],\r\n      payment_method: [\"\"],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    debugger;\r\n    // Lấy danh sách sản phẩm từ giỏ hàng\r\n    const cart = this.cartService.getCart();\r\n    // Chuyển danh sách ID từ Map giỏ hàng\r\n    const productIds = Array.from(cart.keys());\r\n    debugger;\r\n    //get info detail product by list productIds\r\n    this.productService.getProductsByIds(productIds).subscribe({\r\n      next: (products) => {\r\n        debugger;\r\n        this.cartItems = productIds.map((productId) => {\r\n          debugger;\r\n          const product = products.find((p) => p.id === productId);\r\n          if (product) {\r\n            product.thumbnail = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\r\n          }\r\n          return {\r\n            product: product!,\r\n            quantity: cart.get(productId)!,\r\n          };\r\n        });\r\n        console.log(\"done\");\r\n      },\r\n      complete: () => {\r\n        debugger;\r\n        this.calculateTotal();\r\n      },\r\n      error: (error: any) => {\r\n        debugger;\r\n        console.error(\"Error fetching detail: \", error);\r\n      },\r\n    });\r\n  }\r\n\r\n  placeOrder() {\r\n    debugger;\r\n    if (this.orderForm.valid) {\r\n      // this.orderData.fullname = this.orderForm.get('fullname')!.value;\r\n      // this.orderData.email = this.orderForm.get('email')!.value;\r\n      // this.orderData.phone_number = this.orderForm.get('phone_number')!.value;\r\n      // this.orderData.address = this.orderForm.get('address')!.value;\r\n      // this.orderData.note = this.orderForm.get('note')!.value;\r\n      // this.orderData.shipping_method = this.orderForm.get('shipping_method')!.value;\r\n      // this.orderData.payment_method = this.orderForm.get('payment_method')!.value;\r\n\r\n      this.orderData = {\r\n        ...this.orderData,\r\n        ...this.orderForm.value,\r\n      };\r\n      this.orderData.cart_items = this.cartItems.map((cartItem) => ({\r\n        product_id: cartItem.product.id,\r\n        quantity: cartItem.quantity,\r\n      }));\r\n    }\r\n\r\n    this.orderService.placeOrder(this.orderData).subscribe({\r\n      next: (response) => {\r\n        debugger;\r\n        console.log(\"Đặt hàng thành công\");\r\n      },\r\n      complete: () => {\r\n        debugger;\r\n        this.calculateTotal();\r\n      },\r\n      error: (error: any) => {\r\n        debugger;\r\n        console.error(\"Lỗi khi đặt hàng: \", error);\r\n      },\r\n    });\r\n  }\r\n\r\n  calculateTotal(): void {\r\n    this.totalAmount = this.cartItems.reduce(\r\n      (total, item) => total + item.product.price * item.quantity,\r\n      0\r\n    );\r\n  }\r\n\r\n  // Hàm xử lý việc áp dụng mã giảm giá\r\n  applyCoupon(): void {\r\n    // Viết mã xử lý áp dụng mã giảm giá ở đây\r\n    // Cập nhật giá trị totalAmount dựa trên mã giảm giá nếu áp dụng\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}